// <auto-generated />
using System;
using League_Management_Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace League_Management_Data.Migrations
{
    [DbContext(typeof(LMADbContext))]
    [Migration("20220417161144_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("League_Management_Models.Agent", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("League_Management_Models.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MatchStatisticsId")
                        .HasColumnType("uuid");

                    b.Property<string>("PlayerUserId")
                        .HasColumnType("text");

                    b.Property<bool>("RedCard")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("TimeOfCard")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("YellowCard")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("MatchStatisticsId");

                    b.HasIndex("PlayerUserId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("League_Management_Models.Goal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AssistProviderUserId")
                        .HasColumnType("text");

                    b.Property<Guid?>("MatchStatisticsId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Penalty")
                        .HasColumnType("boolean");

                    b.Property<string>("ScorerUserId")
                        .HasColumnType("text");

                    b.Property<string>("TeamId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssistProviderUserId");

                    b.HasIndex("MatchStatisticsId");

                    b.HasIndex("ScorerUserId");

                    b.HasIndex("TeamId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("League_Management_Models.Manager", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("AgentId")
                        .HasColumnType("text");

                    b.Property<string>("CurrentTeamId")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("AgentId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("League_Management_Models.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AwayTeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("HomeTeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RecordsId")
                        .HasColumnType("uuid");

                    b.Property<string>("RefreeUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("RecordsId");

                    b.HasIndex("RefreeUserId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("League_Management_Models.MatchStatistics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("BallPossesion")
                        .HasColumnType("double precision");

                    b.Property<int>("CornerKicks")
                        .HasColumnType("integer");

                    b.Property<int>("FreeKicks")
                        .HasColumnType("integer");

                    b.Property<int>("MyProperty")
                        .HasColumnType("integer");

                    b.Property<int>("PenaltyKicks")
                        .HasColumnType("integer");

                    b.Property<string>("TeamId")
                        .HasColumnType("text");

                    b.Property<int>("TeamSaves")
                        .HasColumnType("integer");

                    b.Property<int>("Throwings")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("MatchStatistics");
                });

            modelBuilder.Entity("League_Management_Models.Owner", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("League_Management_Models.Player", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("AgentId")
                        .HasColumnType("text");

                    b.Property<string>("CurrentTeamId")
                        .HasColumnType("text");

                    b.Property<string>("JerseyNumber")
                        .HasColumnType("text");

                    b.Property<string>("TeamId")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("AgentId");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("League_Management_Models.Position", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("PlayerUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlayerUserId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("League_Management_Models.Records", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("League_Management_Models.Refree", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserId1")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Refrees");
                });

            modelBuilder.Entity("League_Management_Models.Team", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("FoundedeAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("ManagerId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<decimal>("Valaution")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("League_Management_Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PublicId")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("League_Management_Models.Agent", b =>
                {
                    b.HasOne("League_Management_Models.User", "User")
                        .WithOne("Agent")
                        .HasForeignKey("League_Management_Models.Agent", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("League_Management_Models.Card", b =>
                {
                    b.HasOne("League_Management_Models.MatchStatistics", null)
                        .WithMany("ListOfCards")
                        .HasForeignKey("MatchStatisticsId");

                    b.HasOne("League_Management_Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerUserId");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("League_Management_Models.Goal", b =>
                {
                    b.HasOne("League_Management_Models.Player", "AssistProvider")
                        .WithMany()
                        .HasForeignKey("AssistProviderUserId");

                    b.HasOne("League_Management_Models.MatchStatistics", null)
                        .WithMany("Goals")
                        .HasForeignKey("MatchStatisticsId");

                    b.HasOne("League_Management_Models.Player", "Scorer")
                        .WithMany()
                        .HasForeignKey("ScorerUserId");

                    b.HasOne("League_Management_Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.Navigation("AssistProvider");

                    b.Navigation("Scorer");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("League_Management_Models.Manager", b =>
                {
                    b.HasOne("League_Management_Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.HasOne("League_Management_Models.User", "User")
                        .WithOne("Manager")
                        .HasForeignKey("League_Management_Models.Manager", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("League_Management_Models.Match", b =>
                {
                    b.HasOne("League_Management_Models.MatchStatistics", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("AwayTeamId");

                    b.HasOne("League_Management_Models.MatchStatistics", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId");

                    b.HasOne("League_Management_Models.Records", null)
                        .WithMany("MatchRecords")
                        .HasForeignKey("RecordsId");

                    b.HasOne("League_Management_Models.Refree", null)
                        .WithMany("ListOfMatches")
                        .HasForeignKey("RefreeUserId");

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");
                });

            modelBuilder.Entity("League_Management_Models.MatchStatistics", b =>
                {
                    b.HasOne("League_Management_Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("League_Management_Models.Owner", b =>
                {
                    b.HasOne("League_Management_Models.User", "User")
                        .WithOne("Owner")
                        .HasForeignKey("League_Management_Models.Owner", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("League_Management_Models.Player", b =>
                {
                    b.HasOne("League_Management_Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.HasOne("League_Management_Models.Team", null)
                        .WithMany("Players")
                        .HasForeignKey("TeamId");

                    b.HasOne("League_Management_Models.User", "User")
                        .WithOne("Player")
                        .HasForeignKey("League_Management_Models.Player", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("League_Management_Models.Position", b =>
                {
                    b.HasOne("League_Management_Models.Player", null)
                        .WithMany("ListOfPositions")
                        .HasForeignKey("PlayerUserId");
                });

            modelBuilder.Entity("League_Management_Models.Refree", b =>
                {
                    b.HasOne("League_Management_Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("League_Management_Models.Team", b =>
                {
                    b.HasOne("League_Management_Models.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("League_Management_Models.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Manager");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("League_Management_Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("League_Management_Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("League_Management_Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("League_Management_Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("League_Management_Models.MatchStatistics", b =>
                {
                    b.Navigation("Goals");

                    b.Navigation("ListOfCards");
                });

            modelBuilder.Entity("League_Management_Models.Player", b =>
                {
                    b.Navigation("ListOfPositions");
                });

            modelBuilder.Entity("League_Management_Models.Records", b =>
                {
                    b.Navigation("MatchRecords");
                });

            modelBuilder.Entity("League_Management_Models.Refree", b =>
                {
                    b.Navigation("ListOfMatches");
                });

            modelBuilder.Entity("League_Management_Models.Team", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("League_Management_Models.User", b =>
                {
                    b.Navigation("Agent");

                    b.Navigation("Manager");

                    b.Navigation("Owner");

                    b.Navigation("Player");
                });
#pragma warning restore 612, 618
        }
    }
}
